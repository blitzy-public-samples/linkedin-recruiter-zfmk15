# Prometheus StatefulSet manifest for LinkedIn Profile Search monitoring
# Version: v2.45.0
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: linkedin-profile-search
  annotations:
    # Enable automatic backup of storage volumes
    backup.velero.io/backup-volumes: storage
    # Enable Prometheus self-monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"

spec:
  # High availability configuration with multiple replicas
  replicas: {{ .Values.prometheus.replicaCount }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate

  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus

  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
      annotations:
        # Force pod restart when config changes
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}

    spec:
      # Cross-zone anti-affinity for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - prometheus
            topologyKey: topology.kubernetes.io/zone

      # Enhanced security context
      securityContext:
        fsGroup: 65534  # nobody group
        runAsUser: 65534  # nobody user
        runAsNonRoot: true

      serviceAccountName: {{ .Release.Name }}-prometheus

      containers:
      - name: prometheus
        image: {{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.image.tag }}
        imagePullPolicy: IfNotPresent
        args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus
          - --storage.tsdb.retention.time=15d
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --web.console.templates=/usr/share/prometheus/consoles
          - --web.enable-lifecycle

        ports:
        - containerPort: 9090
          name: http

        # Health checking
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 30

        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 30

        # Resource limits and requests
        resources:
          limits:
            cpu: {{ .Values.prometheus.resources.limits.cpu }}
            memory: {{ .Values.prometheus.resources.limits.memory }}
          requests:
            cpu: {{ .Values.prometheus.resources.requests.cpu }}
            memory: {{ .Values.prometheus.resources.requests.memory }}

        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus

      # Graceful shutdown period
      terminationGracePeriodSeconds: 300

      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-prometheus-config

  # Persistent storage configuration
  volumeClaimTemplates:
  - metadata:
      name: storage
      labels:
        app.kubernetes.io/name: prometheus
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.prometheus.persistence.storageClass }}
      resources:
        requests:
          storage: 50Gi