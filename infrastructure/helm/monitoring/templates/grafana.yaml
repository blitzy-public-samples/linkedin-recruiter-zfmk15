# Production-grade Grafana Deployment Template v9.5.0
# Provides high availability, multi-AZ support, enhanced security, and comprehensive monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: {{ .Values.grafana.image.tag }}
    app.kubernetes.io/part-of: linkedin-profile-search
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}

spec:
  # High availability configuration with multiple replicas
  replicas: {{ .Values.grafana.replicaCount }}
  
  # Zero-downtime deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: {{ .Release.Name }}

  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"

    spec:
      # Security context for enhanced container security
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      
      # Service account for RBAC
      serviceAccountName: grafana
      
      # Multi-AZ pod distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: grafana
                  app.kubernetes.io/instance: {{ .Release.Name }}
              topologyKey: topology.kubernetes.io/zone
      
      # Node selection for optimal placement
      nodeSelector:
        kubernetes.io/os: linux
        
      # Pod disruption budget reference
      terminationGracePeriodSeconds: 60
      
      containers:
      - name: grafana
        image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
        imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: admin-password
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: secret-key
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        
        # Resource allocation
        resources:
{{ toYaml .Values.grafana.resources | indent 10 }}
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 10
          failureThreshold: 10
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 10
          failureThreshold: 10
        
        # Volume mounts
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: tmp-data
          mountPath: /tmp
          readOnly: false
      
      # Volumes configuration
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        secret:
          secretName: grafana-datasources
      - name: tmp-data
        emptyDir: {}
      
      # Image pull secrets if using private registry
      imagePullSecrets:
      - name: registry-credentials