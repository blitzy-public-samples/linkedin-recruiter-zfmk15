apiVersion: v1
kind: StatefulSet
metadata:
  name: alertmanager
  labels:
    app.kubernetes.io/name: alertmanager
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: linkedin-profile-search
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    monitoring.linkedin-profile-search.io/component: alert-manager
spec:
  # High availability configuration with multiple replicas
  replicas: {{ .Values.alertmanager.replicaCount }}
  serviceName: alertmanager
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/instance: {{ .Release.Name }}

  template:
    metadata:
      labels:
        app.kubernetes.io/name: alertmanager
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9093"

    spec:
      # Pod distribution and availability rules
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: alertmanager
                  app.kubernetes.io/instance: {{ .Release.Name }}
              topologyKey: kubernetes.io/hostname
              namespaces:
                - {{ .Release.Namespace }}

      # Security context for enhanced security
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault

      # Service account for RBAC
      serviceAccountName: alertmanager

      # Init container for configuration validation
      initContainers:
        - name: config-validator
          image: "{{ .Values.alertmanager.image.repository }}:{{ .Values.alertmanager.image.tag }}"
          imagePullPolicy: IfNotPresent
          args:
            - --config.file=/etc/alertmanager/alertmanager.yml
            - --check-config
          volumeMounts:
            - name: config
              mountPath: /etc/alertmanager
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true

      # Main AlertManager container
      containers:
        - name: alertmanager
          image: "{{ .Values.alertmanager.image.repository }}:{{ .Values.alertmanager.image.tag }}"
          imagePullPolicy: {{ .Values.alertmanager.image.pullPolicy }}
          args:
            - --config.file=/etc/alertmanager/alertmanager.yml
            - --storage.path=/alertmanager
            - --cluster.listen-address=:9094
            - --web.listen-address=:9093
            - --cluster.peer=alertmanager-0.alertmanager:9094
            - --cluster.peer=alertmanager-1.alertmanager:9094
            - --web.external-url=https://alerts.{{ .Release.Namespace }}.svc
            - --log.level=info
            - --data.retention=120h

          ports:
            - name: http
              containerPort: 9093
              protocol: TCP
            - name: cluster
              containerPort: 9094
              protocol: TCP

          # Health checks
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3

          # Resource allocation
          resources:
            {{- toYaml .Values.alertmanager.resources | nindent 12 }}

          # Volume mounts
          volumeMounts:
            - name: config
              mountPath: /etc/alertmanager
              readOnly: true
            - name: data
              mountPath: /alertmanager
            - name: tmp
              mountPath: /tmp

          # Enhanced security context
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true

      # Volumes configuration
      volumes:
        - name: config
          configMap:
            name: alertmanager-config
        - name: tmp
          emptyDir: {}

      # Pod termination configuration
      terminationGracePeriodSeconds: 60

  # Persistent volume claims for data storage
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: alertmanager
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.alertmanager.persistence.storageClass }}
        resources:
          requests:
            storage: {{ .Values.alertmanager.persistence.size }}