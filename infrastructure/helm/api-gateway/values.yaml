# Default values for api-gateway
# Production-grade configuration with HA, security, and monitoring

# Number of API Gateway replicas for high availability
replicaCount: 3

# Container image configuration
image:
  repository: api-gateway
  tag: 1.0.0  # This should match the appVersion in Chart.yaml
  pullPolicy: IfNotPresent

# Image pull secrets for private registry access
imagePullSecrets: []

# Override names
nameOverride: ""
fullnameOverride: ""

# Service account configuration with AWS IAM role for EKS
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/api-gateway-role"
  name: ""

# Pod annotations for Prometheus scraping and Istio injection
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"
  sidecar.istio.io/inject: "true"

# Enhanced security context for pods
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

# Container security context
securityContext:
  capabilities:
    drop: ["ALL"]
  runAsUser: 1000
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

# Service configuration with internal NLB
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"

# Resource limits and requests
resources:
  limits:
    cpu: "2"
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Horizontal pod autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60

# Node selection and affinity rules
nodeSelector:
  kubernetes.io/os: linux
  node.kubernetes.io/purpose: application

# Pod tolerations
tolerations: []

# Pod anti-affinity for HA across zones
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - api-gateway
        topologyKey: topology.kubernetes.io/zone

# Health check probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Redis configuration for rate limiting and caching
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
    sentinel: true
    password: ""  # Should be provided via secrets
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: gp3
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: "1"
        memory: 2Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 8Gi
      storageClass: gp3
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: "1"
        memory: 2Gi

# Istio service mesh configuration
istio:
  enabled: true
  mtls:
    mode: STRICT
  gateway:
    enabled: true
    hosts:
      - api.example.com
  virtualService:
    enabled: true
    hosts:
      - api.example.com
    gateways:
      - api-gateway

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    labels:
      release: prometheus
  grafanaDashboards:
    enabled: true

# Environment variables
env:
  NODE_ENV: production
  PORT: "3000"
  LOG_LEVEL: info
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "1000"