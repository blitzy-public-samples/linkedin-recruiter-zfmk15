apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "analysis-service.fullname" . }}
  labels:
    {{- include "analysis-service.labels" . | nindent 4 }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  # Ensure high availability with minimum 2 replicas
  replicas: {{ .Values.replicaCount }}
  # Configure zero-downtime updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "analysis-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        # Add checksums to force pod updates when configs change
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "analysis-service.selectorLabels" . | nindent 8 }}
    spec:
      # Configure pod security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # Configure container security context
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 8000
              protocol: TCP
          # Configure resource limits as per technical specifications
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: CLAUDE_BASE_URL
              value: {{ .Values.env.CLAUDE_BASE_URL }}
            - name: CLAUDE_MODEL
              value: {{ .Values.env.CLAUDE_MODEL }}
            - name: LOG_LEVEL
              value: {{ .Values.env.LOG_LEVEL }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          # Include secrets as environment variables
          envFrom:
            - secretRef:
                name: {{ .Values.secrets.claudeApiKey.name }}
          # Configure health checks
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/startup
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
          # Mount temporary storage
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      # Configure volumes
      volumes:
        - name: tmp
          emptyDir: {}
      # Configure pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "analysis-service.selectorLabels" . | nindent 20 }}
                topologyKey: kubernetes.io/hostname
      # Configure graceful termination
      terminationGracePeriodSeconds: 60