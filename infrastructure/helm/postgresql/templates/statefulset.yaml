apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}

spec:
  serviceName: {{ include "postgresql.fullname" . }}-headless
  replicas: {{ .Values.architecture.replicaCount }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if eq .Values.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      partition: 0
    {{- end }}
  
  selector:
    matchLabels:
      {{- include "common.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database

  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: database
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        {{- end }}

    spec:
      serviceAccountName: {{ include "postgresql.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.primary.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.primary.podSecurityContext.runAsUser }}
        runAsNonRoot: {{ .Values.primary.podSecurityContext.runAsNonRoot }}
        seccompProfile:
          type: RuntimeDefault

      # Pod scheduling and anti-affinity rules
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                {{- include "common.selectorLabels" . | nindent 16 }}
                app.kubernetes.io/component: database
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - us-west-2a
                - us-west-2b
                - us-west-2c

      # Initialize volumes and certificates
      initContainers:
      - name: init-permissions
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ['sh', '-c', 'chmod 700 /bitnami/postgresql/data']
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql/data
        securityContext:
          runAsUser: 1001

      containers:
      - name: postgresql
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: {{ .Values.primary.containerSecurityContext.runAsUser }}
          runAsNonRoot: {{ .Values.primary.containerSecurityContext.runAsNonRoot }}
          allowPrivilegeEscalation: {{ .Values.primary.containerSecurityContext.allowPrivilegeEscalation }}
          capabilities:
            drop:
            - ALL

        # Resource limits and requests
        resources:
          {{- toYaml .Values.primary.resources | nindent 10 }}

        # Environment variables
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "{{ .Values.service.port }}"
        - name: POSTGRESQL_VOLUME_DIR
          value: "/bitnami/postgresql"
        {{- if .Values.auth.usePasswordFile }}
        - name: POSTGRES_PASSWORD_FILE
          value: "/opt/bitnami/postgresql/secrets/postgresql-password"
        - name: POSTGRES_REPLICATION_PASSWORD_FILE
          value: "/opt/bitnami/postgresql/secrets/postgresql-replication-password"
        {{- end }}
        {{- range .Values.primary.extraEnvVars }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}

        ports:
        - name: tcp-postgresql
          containerPort: {{ .Values.service.port }}
        
        # Liveness probe
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h localhost -p {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}

        # Readiness probe
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h localhost -p {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}

        # Volume mounts
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
        - name: config
          mountPath: /opt/bitnami/postgresql/conf/postgresql.conf
          subPath: postgresql.conf
        - name: config
          mountPath: /opt/bitnami/postgresql/conf/pg_hba.conf
          subPath: pg_hba.conf
        {{- if .Values.auth.usePasswordFile }}
        - name: postgresql-credentials
          mountPath: /opt/bitnami/postgresql/secrets
          readOnly: true
        {{- end }}
        {{- if .Values.auth.enableTLS }}
        - name: certificates
          mountPath: /opt/bitnami/postgresql/certs
          readOnly: true
        {{- end }}

        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
                {{- toYaml .Values.lifecycle.preStop.exec.command | nindent 16 }}

      {{- if .Values.metrics.enabled }}
      # Metrics exporter sidecar
      - name: metrics
        image: "{{ .Values.metrics.image.registry }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
        securityContext:
          runAsUser: 1001
          runAsNonRoot: true
        ports:
        - name: metrics
          containerPort: 9187
        resources:
          {{- toYaml .Values.metrics.resources | nindent 10 }}
      {{- end }}

      volumes:
      - name: config
        configMap:
          name: {{ include "postgresql.fullname" . }}-config
      {{- if .Values.auth.usePasswordFile }}
      - name: postgresql-credentials
        secret:
          secretName: {{ .Values.auth.existingSecret }}
      {{- end }}
      {{- if .Values.auth.enableTLS }}
      - name: certificates
        secret:
          secretName: {{ .Values.auth.certificatesSecret }}
      {{- end }}

  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{- include "common.labels" . | nindent 8 }}
      annotations:
        {{- toYaml .Values.persistence.annotations | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.persistence.accessModes }}
        - {{ . | quote }}
      {{- end }}
      storageClassName: {{ .Values.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}