name: Web CI/CD

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'

# Environment variables
env:
  REGISTRY: ${{ secrets.REGISTRY }}
  IMAGE_NAME: linkedin-profile-search-web
  IMAGE_TAG: ${{ github.sha }}
  NODE_VERSION: '18'
  TEST_COVERAGE_THRESHOLD: '80'
  BUILD_TIMEOUT_MINUTES: '10'
  DEPLOY_TIMEOUT_MINUTES: '15'
  CPU_LIMIT: '1'
  MEMORY_LIMIT: '2Gi'

# Concurrency control to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.BUILD_TIMEOUT_MINUTES }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'

      - name: Install dependencies
        working-directory: src/web
        run: |
          npm ci --no-audit
          npm audit fix --force || true

      - name: Run security scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run ESLint
        working-directory: src/web
        run: npm run lint

      - name: Run tests with coverage
        working-directory: src/web
        run: npm run test:coverage
        env:
          CI: true

      - name: Check coverage threshold
        working-directory: src/web
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          if (( $(echo "$COVERAGE < ${{ env.TEST_COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below threshold (${{ env.TEST_COVERAGE_THRESHOLD }}%)"
            exit 1
          fi

      - name: Build application
        working-directory: src/web
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}
          VITE_API_VERSION: 'v1'
          VITE_AUTH_DOMAIN: ${{ secrets.AUTH_DOMAIN }}
          VITE_AUTH_CLIENT_ID: ${{ secrets.AUTH_CLIENT_ID }}
          VITE_AUTH_AUDIENCE: ${{ secrets.AUTH_AUDIENCE }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: src/web/dist
          retention-days: 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            src/web/coverage
            src/web/junit.xml
          retention-days: 1

  docker-build-push:
    name: Build and Push Docker Image
    needs: build-test
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.BUILD_TIMEOUT_MINUTES }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: src/web/dist

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          file: src/web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            VITE_API_BASE_URL=${{ secrets.API_BASE_URL }}
            VITE_API_VERSION=v1
            VITE_AUTH_DOMAIN=${{ secrets.AUTH_DOMAIN }}
            VITE_AUTH_CLIENT_ID=${{ secrets.AUTH_CLIENT_ID }}
            VITE_AUTH_AUDIENCE=${{ secrets.AUTH_AUDIENCE }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64
          provenance: false

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    needs: docker-build-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.DEPLOY_TIMEOUT_MINUTES }}
    environment:
      name: production
      url: https://app.linkedin-profile-search.com

    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/linkedin-profile-search-web \
            web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --record
          
          kubectl rollout status deployment/linkedin-profile-search-web \
            --timeout=${{ env.DEPLOY_TIMEOUT_MINUTES }}m

      - name: Verify deployment health
        run: |
          READY=$(kubectl get deployment linkedin-profile-search-web -o jsonpath='{.status.readyReplicas}')
          DESIRED=$(kubectl get deployment linkedin-profile-search-web -o jsonpath='{.spec.replicas}')
          
          if [ "$READY" != "$DESIRED" ]; then
            echo "Deployment is not healthy. Ready: $READY, Desired: $DESIRED"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          ENDPOINT="https://app.linkedin-profile-search.com/health"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ENDPOINT)
          
          if [ "$STATUS" != "200" ]; then
            echo "Health check failed with status: $STATUS"
            exit 1
          fi