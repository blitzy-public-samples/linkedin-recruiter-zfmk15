name: API Gateway CI/CD

# Trigger workflow on push/PR to main branch for api-gateway changes
on:
  push:
    branches: [main]
    paths:
      - 'src/backend/api-gateway/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/api-gateway/**'

# Enable concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define permissions
permissions:
  id-token: write
  contents: read
  packages: write
  deployments: write
  security-events: write

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: api-gateway
  NODE_VERSION: '18.x'
  DOCKER_BUILDKIT: '1'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/backend/api-gateway/package-lock.json

      - name: Install dependencies
        working-directory: src/backend/api-gateway
        run: npm ci

      - name: Run linting
        working-directory: src/backend/api-gateway
        run: npm run lint

      - name: Run unit tests
        working-directory: src/backend/api-gateway
        run: npm run test:coverage

      - name: Run security scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          working-directory: src/backend/api-gateway

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: src/backend/api-gateway/coverage

      - name: Monitor CI Pipeline
        uses: datadog/action-ci-visibility@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/backend/api-gateway
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Scan container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to ${{ matrix.environment }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, staging, production]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ matrix.environment == 'production' && 'https://api.linkedin-search.com' || matrix.environment == 'staging' && 'https://staging-api.linkedin-search.com' || 'https://dev-api.linkedin-search.com' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/api-gateway \
            api-gateway=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            --namespace=${{ matrix.environment }}
          kubectl rollout status deployment/api-gateway \
            --namespace=${{ matrix.environment }} \
            --timeout=300s

      - name: Run smoke tests
        run: |
          curl -f https://${{ matrix.environment }}-api.linkedin-search.com/health || exit 1

      - name: Monitor deployment health
        uses: datadog/action-ci-visibility@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          tags: |
            environment:${{ matrix.environment }}
            service:api-gateway
            version:${{ github.sha }}

      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        if: always()
        with:
          token: ${{ github.token }}
          environment-url: ${{ steps.deploy.outputs.url }}
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
          deployment-id: ${{ steps.deploy.outputs.deployment_id }}